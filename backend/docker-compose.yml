services:
  backend:
    build:
      context: .
      dockerfile: ./Dockerfile
    env_file:
      - .env
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASS}@db:5432/${DB_NAME}?schema=public
      PORT: 8000
    expose:
      - 8000
    # deploy:
    #   mode: replicas
    #   replicas: 3
    #   update_config:
    #     parallelism: 2
    #     delay: 10s
    #     order: start-first
    #     failure_action: rollback
    depends_on:
      db:
        condition: service_healthy

  caddy:
    image: caddy:2.7-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./site:/srv
      - caddy_data:/data
      - caddy_config:/config

  db:
    image: postgres:17.2-alpine3.21
    restart: always
    user: postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  storage:
    image: minio/minio:RELEASE.2025-01-20T14-49-07Z-cpuv1
    expose:
      - 9000
      - 9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - storage_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db_data:
  caddy_data:
  caddy_config:
  storage_data: